#include "gen_shares.h"

gen_shares::gen_shares(int _player_num, std::vector <int> & _committees, std::vector <std::vector <unsigned char>> & _aes_seeds) {

    player_num = _player_num;
    committees = _committees;
    aes_seeds = _aes_seeds;
    aesImpl = std::make_shared <aes>();

}

gen_shares::gen_shares(int _player_num, std::vector <int> & _committees, std::vector <std::vector <unsigned char>> & _aes_seeds, std::shared_ptr <aes> _aesImpl) {

    player_num = _player_num;
    committees = _committees;
    aes_seeds = _aes_seeds;
    aesImpl = _aesImpl;

}

FieldT gen_shares::gen(int for_player, int h_index) {

    std::vector <unsigned char> enc_data;
    std::vector <unsigned char> uchar_index (sizeof(int));
    memcpy(uchar_index.data(), &h_index, sizeof(int));
    std::vector <unsigned char> iv(AES_BLOCK_SIZE, 0); // use 0 iv (one msg per key)
    // these are generated by this player
    aesImpl->aes256ecb_encrypt(enc_data, uchar_index, aes_seeds[for_player-1], iv);
    uint64_t element;
    memcpy(&element, enc_data.data(), sizeof(uint64_t));
    return FieldT(element);
}

FieldT gen_shares::gen_to_send(FieldT val, int recv_player, int h_index) {

    int committee_id = committees[recv_player - 1];
    if (committee_id == 0){
        std::cout << "error recv_player: " << recv_player << " is not in committee (has committee_id == 0)" << std::endl;
        exit(1);
    }
    FieldT total = val;
    for (int i = 0 ; i < committees.size(); i++) {
        if ((committees[i] == committee_id) && (i != (recv_player - 1))) {
            total = total - gen(i+1, h_index);
        }
    }

    return total;
}

FieldT gen_shares::gen_local(FieldT val, int h_index) {

    return gen_to_send(val, player_num, h_index);
}